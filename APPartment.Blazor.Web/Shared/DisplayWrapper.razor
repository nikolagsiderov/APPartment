@using System.Reflection
@using System.ComponentModel.DataAnnotations

@if (FieldTemplate.Equals(Templates.Input))
{
    <div class="form-group">
        <label>@displayName</label>
        @if (isRequired)
        {
            <span style="color: red;">*</span>
        }
        <input disabled="disabled" name="@property.Name" value="@this.ValueString" class="form-control" placeholder="@property.Name" />
    </div>
}
else if (FieldTemplate.Equals(Templates.TextArea))
{
    <div class="form-group">
        <label>@displayName</label>
        <textarea name="@property.Name" class="form-control form-control-solid" rows="5" disabled="disabled" placeholder="@property.Name">@this.ValueString</textarea>
    </div>
}
else if (FieldTemplate.Equals(Templates.Password))
{
    <div class="form-group">
        <label>@displayName</label>
        @if (isRequired)
        {
            <span style="color: red;">*</span>
        }
        <input disabled="disabled" type="password" name="@property.Name" value="@this.ValueString" class="form-control" placeholder="@property.Name" />
    </div>
}
else if (FieldTemplate.Equals(Templates.Number))
{
    <div class="form-group">
        <label>@displayName</label>
        @if (isRequired)
        {
            <span style="color: red;">*</span>
        }
        <input disabled="disabled" type="number" name="@property.Name" value="@this.ValueInteger" class="form-control" placeholder="@property.Name" />
    </div>
}
else if (FieldTemplate.Equals(Templates.NumberNullable))
{
    <div class="form-group">
        <label>@displayName</label>
        @if (isRequired)
        {
            <span style="color: red;">*</span>
        }
        <input disabled="disabled" type="number" name="@property.Name" value="@this.ValueIntegerNullable" class="form-control" placeholder="@property.Name" />
    </div>
}
else if (FieldTemplate.Equals(Templates.Boolean))
{
    <span>@displayName</span>
    <div class="slider disabledbutton">
        <input disabled="disabled" type="checkbox" name="@property.Name" value="@this.ValueBoolean" class="toggle-pill" />
        <label class="toggle-label" for="toggle-pill"></label>
    </div>
}
else if (FieldTemplate.Equals(Templates.BooleanNullable))
{
    <span>@displayName</span>
    <div class="slider disabledbutton">
        <input disabled="disabled" type="checkbox" name="@property.Name" value="@this.ValueBoolean" class="toggle-pill" />
        <label class="toggle-label" for="toggle-pill"></label>
    </div>
}
else if (FieldTemplate.Equals(Templates.Dropdown))
{
    <div class="form-group">
        <label>@displayName</label>
        <select class="form-control form-control-solid" disabled="disabled" name="@property.Name">
            @*@if (Model.Any(x => x.Selected))
                {
                    <option selected="@Model.Where(x => x.Selected).FirstOrDefault().Selected" value="@Model.Where(x => x.Selected).FirstOrDefault().Value">@Model.Where(x => x.Selected).FirstOrDefault().Text</option>
                }
                else
                {
                    <option>None selected</option>
                }*@

            <option>None selected</option>
        </select>
    </div>
}
else if (FieldTemplate.Equals(Templates.Date))
{
    <div class="form-group">
        <label>@displayName</label>
        @if (isRequired)
        {
            <span style="color: red;">*</span>
        }
        <input disabled="disabled" type="date" name="@property.Name" value="@this.ValueDateTime" class="form-control" placeholder="@property.Name" />
    </div>
}
else if (FieldTemplate.Equals(Templates.DateNullable))
{
    <div class="form-group">
        <label>@displayName</label>
        @if (isRequired)
        {
            <span style="color: red;">*</span>
        }
        <input disabled="disabled" type="date" name="@property.Name" value="@this.ValueDateTimeNullable" class="form-control" placeholder="@property.Name" />
    </div>
}
else if (FieldTemplate.Equals(Templates.Multiselect))
{
    <div class="form-group">
        <label>@displayName</label>
        <select multiple class="form-control form-control-solid" disabled="disabled" name="@property.Name">
            @*@if (Model.Any(x => x.Selected))
                {
                    foreach (var option in Model.Where(x => x.Selected))
                    {
                        <option selected="@option.Selected" value="@option.Value">@option.Text</option>
                    }
                }
                else
                {
                    <option>None selected</option>
                }*@

            <option>None selected</option>
        </select>
    </div>
}


@code {
    [Parameter]
    public string PropertyName { get; set; }

    [Parameter]
    public object Source { get; set; }

    private string FieldTemplate { get; set; }

    private string ValueString
    {
        get
        {
            if (FieldTemplate.Equals(Templates.Input) || FieldTemplate.Equals(Templates.Password) || FieldTemplate.Equals(Templates.TextArea))
            {
                return property.GetValue(Source) == null ? string.Empty : property.GetValue(Source).ToString();
            }
            else
            {
                return string.Empty;
            }
        }
    }

    private int ValueInteger
    {
        get
        {
            return FieldTemplate.Equals(Templates.Number) ? property.GetValue(Source) == null ? 0 : (int)property.GetValue(Source) : 0;
        }
    }

    private int? ValueIntegerNullable
    {
        get
        {
            return FieldTemplate.Equals(Templates.NumberNullable) ? property.GetValue(Source) == null ? null : (int?)property.GetValue(Source) : null;
        }
    }

    private long ValueBigInteger
    {
        get
        {
            return FieldTemplate.Equals(Templates.Dropdown) ? property.GetValue(Source) == null ? 0 : (long)property.GetValue(Source) : 0;
        }
    }

    private bool ValueBoolean
    {
        get
        {
            return FieldTemplate.Equals(Templates.Boolean) ? property.GetValue(Source) == null ? false : (bool)property.GetValue(Source) : false;
        }
    }

    private bool? ValueBooleanNullable
    {
        get
        {
            return FieldTemplate.Equals(Templates.BooleanNullable) ? property.GetValue(Source) == null ? null : (bool?)property.GetValue(Source) : null;
        }
    }

    private DateTime ValueDateTime
    {
        get
        {
            return FieldTemplate.Equals(Templates.Date) ? property.GetValue(Source) == null ? DateTime.Now : (DateTime)property.GetValue(Source) : DateTime.Now;
        }
    }

    private DateTime? ValueDateTimeNullable
    {
        get
        {
            return FieldTemplate.Equals(Templates.DateNullable) ? property.GetValue(Source) == null ? null : (DateTime?)property.GetValue(Source) : null;
        }
    }

    private IEnumerable<long> ValueBigIntegerCollection
    {
        get
        {
            return FieldTemplate.Equals(Templates.Input) ? property.GetValue(Source) == null ? new List<long>() : property.GetValue(Source) as List<long> : new List<long>();
        }
    }

    private bool isRequired;
    private string displayName;
    private PropertyInfo property;
    private APPUIHintAttribute propertyUIInfo;

    protected override Task OnInitializedAsync()
    {
        property = Source.GetType().GetProperty(PropertyName);
        propertyUIInfo = (property.GetCustomAttribute(typeof(APPUIHintAttribute)) as APPUIHintAttribute);
        this.FieldTemplate = propertyUIInfo.Template;

        var requiredAttribute = property.GetCustomAttribute(typeof(RequiredAttribute)) as RequiredAttribute;
        isRequired = requiredAttribute != null;

        displayName = property.GetCustomAttributes(typeof(DisplayAttribute), true).Any() ? property.GetCustomAttributes(typeof(DisplayAttribute), true).Cast<DisplayAttribute>().Single().Name : property.Name;

        return base.OnInitializedAsync();
    }
}