@model IEnumerable<APPartment.Infrastructure.UI.Common.ViewModels.Base.GridItemViewModel>

@using APPartment.Infrastructure.Attributes
@using System.ComponentModel.DataAnnotations

@{
    var canManage = bool.Parse(ViewData["CanManage"].ToString());
}

<div class="card shadow mb-4">
    @if (canManage)
    {
        <div class="card-header py-3">
            <div style="margin-left: 4px; margin-right: 4px;">
                <a asp-action="Create" class="no-underline btn btn-success btn-sm" style="font-size: small;"><i class="fas fa-plus"></i>&nbsp; Add</a>
            </div>
            @if (ViewData["TypesLink"] != null)
            {
                <div style="margin-left: 4px; margin-right: 4px;">
                    <a href="@ViewData["TypesLink"].ToString()" class="no-underline btn btn-info btn-sm" style="font-size: small;"><i class="@ViewData["TypesLinkFAIcon"]"></i>&nbsp; Types</a>
                </div>
            }
        </div>
    }
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-bordered table-hover" id="dataTable" width="100%" cellspacing="0">
                <thead>
                    <tr>
                        @if (Model.Any())
                        {
                            @foreach (var property in Model.FirstOrDefault().Properties)
                            {
                                <th>
                                    @property.DisplayName
                                </th>
                            }
                            <th>
                                Actions
                            </th>
                        }
                        else
                        {
                            var properties = typeof(GridItemViewModel).GetProperties()
                                .Where(p => p.IsDefined(typeof(GridFieldDisplayAttribute), true))
                                .Select(p => new
                                {
                                    DisplayName = p.GetCustomAttributes(typeof(DisplayAttribute), true).Any() ? p.GetCustomAttributes(typeof(DisplayAttribute), true).Cast<DisplayAttribute>().Single().Name : p.Name
                                });

                            @foreach (var property in properties)
                            {
                                <th>
                                    @property.DisplayName
                                </th>
                            }
                        }
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Any())
                    {
                        @foreach (var item in Model)
                        {
                            <tr>
                                @foreach (var property in item.Properties)
                                {
                                    var value = @property.Property.GetValue(item);
                                    <td>@value</td>
                                }
                                <td>
                                    @{
                                        var actionsHtml = string.Join(" ", item.ActionsHtml);
                                    }
                                    <span id="grid-actions-for-@item.ID">@Html.Raw(actionsHtml)</span>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script src="~/js/grid.js"></script>
